// js/pages/dashboard.page.js
import { setupMobileNav } from '../ui/mobileNav.js'; // <-- 1. Import ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
import { protectPage } from '../auth/guard.js';
import { signOutIfAny } from '../auth/auth.js';
import { listAll, upsertProperty, removeProperty } from '../services/propertiesService.js';
import { setupNav } from '../utils/config.js';
import { formatPrice } from '../utils/format.js';
import { getFormData } from '../ui/forms.js';
import { el, $, $$, clear } from '../ui/dom.js';
import { toast } from '../ui/toast.js';

const tableBody = $('#properties-table tbody');
const modal = $('#property-modal');
const modalTitle = $('#modal-title');
const propertyForm = $('#property-form');
const addPropertyBtn = $('#add-property-btn');
const closeModalBtn = $('.modal-close');
const cancelModalBtn = $('.modal-cancel');
const coverImageInput = $('#cover-image-input');
const imagePreview = $('#image-preview');

// --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡∏°‡πà ---
const renovationModal = $('#renovation-modal');
const closeRenovationModalBtn = $('.renovation-close');
const renovationListDiv = $('#renovation-list');
const renovationItemsContainer = $('#renovation-items-container');
const addRenovationItemBtn = $('#add-renovation-item-btn');

let modalMap = null;       // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö instance ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
let draggableMarker = null; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö instance ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏î
const galleryImagesInput = $('#gallery-images-input'); // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ

// -- ADD YOUR CLOUDINARY DETAILS HERE --
const CLOUD_NAME = 'dupwjm8q2'; // << Replace with your Cloud Name
const UPLOAD_PRESET = 'praweena_property_preset'; // << Replace with your Upload Preset Name
const CLOUDINARY_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`;

/**
 * ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
async function loadProperties() {
  clear(tableBody);
  tableBody.append(el('tr', {}).appendChild(el('td', {
    textContent: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...',
    attributes: { colspan: 5, style: 'text-align: center;' }
  })));

  const { data, error } = await listAll();

  clear(tableBody);
  if (error) return toast('Error: ' + error.message, 4000, 'error');

  if (data.length === 0) {
    tableBody.append(el('tr', {}).appendChild(el('td', {
      textContent: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®',
      attributes: { colspan: 5, style: 'text-align: center;' }
    })));
  }

  data.forEach(renderPropertyRow);
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
 */
function renderPropertyRow(prop) {
  const tr = el('tr', { attributes: { 'data-id': prop.id } });
  
  tr.innerHTML = `
    <td>${prop.title}</td>
    <td>${formatPrice(prop.price)}</td>
    <td>${prop.published ? '‚úÖ ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà' : 'üö´ ‡∏â‡∏ö‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á'}</td>
    <td>${new Date(prop.updated_at).toLocaleDateString('th-TH')}</td>
    <td>
      <button class="btn btn-secondary edit-btn">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
	  <button class="btn btn-secondary view-renovations-btn">‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á</button>
      <button class="btn btn-secondary delete-btn" style="background: #fee2e2; color: #ef4444; border: none;">‡∏•‡∏ö</button>
    </td>
  `;

  // Event Listeners for buttons in this row
  tr.querySelector('.edit-btn').addEventListener('click', () => handleEdit(prop));
  tr.querySelector('.view-renovations-btn').addEventListener('click', () => openRenovationModal(prop));
  tr.querySelector('.delete-btn').addEventListener('click', () => handleDelete(prop.id, prop.title));

  tableBody.append(tr);
}

// --- Modal Handling ---
function openModal() { modal.classList.add('open'); }
function closeModal() {
  modal.classList.remove('open');
  propertyForm.reset();
  propertyForm.elements.id.value = '';
  // ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
  imagePreview.src = '';
  imagePreview.style.display = 'none';
  // ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  const mapContainer = $('#modal-map');
  if (mapContainer) mapContainer.style.display = 'none';
}

addPropertyBtn.addEventListener('click', () => {
  modalTitle.textContent = '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡∏°‡πà';
  openModal();
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  setTimeout(() => setupModalMap(), 100); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Modal ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
});
closeModalBtn.addEventListener('click', closeModal);
cancelModalBtn.addEventListener('click', closeModal);
window.addEventListener('click', e => { if (e.target === modal) closeModal(); });

// --- CRUD Handlers ---

function handleEdit(prop) {
  modalTitle.textContent = `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${prop.title}`;

  // Populate form with existing data
  for (const key in prop) {
    if (propertyForm.elements[key]) {
      if (propertyForm.elements[key].type === 'checkbox') {
        propertyForm.elements[key].checked = prop[key];
      } else {
        propertyForm.elements[key].value = prop[key] || '';
      }
    }
  }

  // Populate Renovation Items
  clear(renovationItemsContainer);
  const renovations = prop.renovations || [];
  renovations.forEach((item, index) => {
    renovationItemsContainer.append(createRenovationItemInputs(item, index));
  });

  // *** ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ***
  if (prop.cover_url) {
    imagePreview.src = prop.cover_url;
    imagePreview.style.display = 'block';
  } else {
    imagePreview.style.display = 'none';
  }

  // *** ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å openModal() ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏û‡∏≠ ***
  openModal(); 

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
  setTimeout(() => setupModalMap(prop.latitude, prop.longitude), 100);

} 

async function handleDelete(id, title) {
  if (confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö "${title}"?`)) {
    const { error } = await removeProperty(id);
    if (error) {
      toast('‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + error.message, 4000, 'error');
    } else {
      toast('‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß', 2000, 'success');
      loadProperties(); // Refresh the list
    }
  }
}

propertyForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  const submitBtn = propertyForm.querySelector('button[type="submit"]');
  submitBtn.disabled = true;
  submitBtn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';

  const payload = getFormData(propertyForm);
  payload.published = !!payload.published; // Handle checkbox

  // *** ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ try { ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ***

  try { // <--- ‡πÄ‡∏£‡∏¥‡πà‡∏° try block ‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    // --- Collect Renovation Data ---
    const renovationItems = [];
    $$('#renovation-items-container .renovation-form-item').forEach(itemDiv => {
      const date = itemDiv.querySelector('.renovation-date').value;
      const description = itemDiv.querySelector('.renovation-desc').value;
	  const paintColor = itemDiv.querySelector('.renovation-paint-color').value;
      const cost = itemDiv.querySelector('.renovation-cost').value;
      if (date || description || cost) {
        renovationItems.push({
          date: date || null,
          description: description || null,
		  paint_color: paintColor || null, // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° paint_color ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
          cost: cost ? parseFloat(cost) : null
        });
      }
    });
    payload.renovations = renovationItems;
    // --------------------------------

    // --- Upload Images (Cloudinary) ---
    const coverFile = coverImageInput.files[0];
    if (coverFile) {
      const formData = new FormData();
      formData.append('file', coverFile);
      formData.append('upload_preset', UPLOAD_PRESET);
      const response = await fetch(CLOUDINARY_URL, { method: 'POST', body: formData });
      if (!response.ok) throw new Error('Cover image upload failed');
      const imageData = await response.json();
      payload.cover_url = imageData.secure_url;
    }

    const galleryFiles = galleryImagesInput.files;
    if (galleryFiles.length > 0) {
      submitBtn.textContent = `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ (0/${galleryFiles.length})...`;
      const uploadPromises = Array.from(galleryFiles).map(file => {
          const formData = new FormData();
          formData.append('file', file);
          formData.append('upload_preset', UPLOAD_PRESET);
          return fetch(CLOUDINARY_URL, { method: 'POST', body: formData }).then(res => {
              if (!res.ok) throw new Error(`Gallery image upload failed for ${file.name}`);
              return res.json();
          });
      });
      const uploadedImages = await Promise.all(uploadPromises);
      payload.gallery = uploadedImages.map(img => img.secure_url);
    }

    // --- Save to Supabase ---
    const { data, error } = await upsertProperty(payload);
    if (error) throw error;

    toast('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 2000, 'success');
    closeModal();
    loadProperties();

  } catch (error) { // <--- catch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö try block ‡∏´‡∏•‡∏±‡∏Å
    console.error('Failed to save property:', error);
    toast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 4000, 'error');
  } finally { // <--- finally ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö try block ‡∏´‡∏•‡∏±‡∏Å
    submitBtn.disabled = false;
    submitBtn.textContent = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å';
  }
});


// --- Main execution ---
document.addEventListener('DOMContentLoaded', async () => {
  await protectPage(); // ** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ **
  setupNav();
  signOutIfAny();
  setupMobileNav(); // <-- 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  loadProperties();
});

// *** ‡∏¢‡πâ‡∏≤‡∏¢ Event Listener ‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ***
  addRenovationItemBtn.addEventListener('click', () => {
    renovationItemsContainer.append(createRenovationItemInputs({}, renovationItemsContainer.children.length));
  });
  // ------------------------------------

// --- Image Preview Handler ---
coverImageInput.addEventListener('change', () => {
  const file = coverImageInput.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = (e) => {
      imagePreview.src = e.target.result;
      imagePreview.style.display = 'block';
    };
    reader.readAsDataURL(file);
  } else {
    imagePreview.style.display = 'none';
  }
});

// --- Map Handling Function ---
function setupModalMap(lat, lng) {
  const latInput = propertyForm.elements.latitude;
  const lngInput = propertyForm.elements.longitude;

  // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÉ‡∏à‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤
  const startLat = lat || 9.1337;
  const startLng = lng || 99.3325;

  const mapContainer = $('#modal-map');
  mapContainer.style.display = 'block'; // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà

  if (modalMap) {
    // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
    modalMap.setView([startLat, startLng], 15);
    draggableMarker.setLatLng([startLat, startLng]);
  } else {
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏∏‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
    modalMap = L.map('modal-map').setView([startLat, startLng], 15);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(modalMap);

    draggableMarker = L.marker([startLat, startLng], {
      draggable: true // *** ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏∏‡∏î‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ ***
    }).addTo(modalMap);

    // Event Listener: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏≤‡∏Å‡∏´‡∏°‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏•‡πà‡∏≠‡∏¢
    draggableMarker.on('dragend', function(event) {
      const marker = event.target;
      const position = marker.getLatLng();
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      latInput.value = position.lat.toFixed(6);
      lngInput.value = position.lng.toFixed(6);
    });
  }
}

// --- Renovation Modal Functions ---
function openRenovationModal(property) {
  $('#renovation-modal-title').textContent = `‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ${property.title}`;
  clear(renovationListDiv); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤

  const renovations = property.renovations || []; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á

  if (renovations.length === 0) {
    renovationListDiv.append(el('p', { textContent: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á', style: 'color: var(--text-light); text-align: center;' }));
  } else {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
    renovations.forEach((item, index) => {
      const itemDiv = el('div', { style: 'border-bottom: 1px solid var(--border-color); padding-bottom: 0.5rem; margin-bottom: 0.5rem;' });
		itemDiv.innerHTML = `
		  <strong>${index + 1}. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> ${item.date || 'N/A'}<br>
		  <strong>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</strong> ${item.description || '-'}<br>
		  <strong>‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:</strong> ${item.paint_color || '-'}<br>
		  <strong>‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢:</strong> ${item.cost ? formatPrice(item.cost) : '-'} 
		`;
      renovationListDiv.append(itemDiv);
    });
  }
  renovationModal.classList.add('open');
}

function closeRenovationModal() {
  renovationModal.classList.remove('open');
}

// Event listeners for renovation modal
closeRenovationModalBtn.addEventListener('click', closeRenovationModal);
window.addEventListener('click', e => { if (e.target === renovationModal) closeRenovationModal(); });

// --- Renovation Form Item Function ---
function createRenovationItemInputs(item = {}, index) {
  const itemDiv = el('div', { className: 'renovation-form-item grid grid-cols-4', style: 'gap: 1rem; align-items: flex-end; margin-bottom: 1rem; border-bottom: 1px solid #eee; padding-bottom: 1rem;' }); // Changed grid to cols-4

  itemDiv.innerHTML = `
    <div class="form-group col-span-1">
      <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á</label>
      <input type="date" class="form-control renovation-date" value="${item.date || ''}">
    </div>
    <div class="form-group col-span-1">
      <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
      <input type="text" class="form-control renovation-desc" value="${item.description || ''}">
    </div>

    <div class="form-group col-span-1">
      <label>‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (‡πÄ‡∏ö‡∏≠‡∏£‡πå/‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠)</label>
      <input type="text" class="form-control renovation-paint-color" value="${item.paint_color || ''}"> 
    </div>

    <div class="form-group col-span-1 grid grid-cols-2" style="gap: 0.5rem;">
      <div>
          <label>‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢</label>
          <input type="number" class="form-control renovation-cost" value="${item.cost || ''}">
      </div>
      <button type="button" class="btn btn-secondary remove-renovation-item-btn" style="background: #fee2e2; color: #ef4444; border: none;">‡∏•‡∏ö</button>
    </div>
  `;

  itemDiv.querySelector('.remove-renovation-item-btn').addEventListener('click', () => {
    itemDiv.remove();
  });

  return itemDiv;
}